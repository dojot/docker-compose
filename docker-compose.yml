version: '3.0'
services:

  history:
    image: dojot/history:development
    restart: always
    depends_on:
      - mongodb
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
      DOJOT_MANAGEMENT_USER: 'history'
    logging:
      driver: json-file
      options:
        max-size: 100m

  persister:
    image: dojot/persister:development
    restart: always
    depends_on:
      - mongodb
      - auth
      - kafka
      - data-broker
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
      DOJOT_MANAGEMENT_USER: 'persister'
      KAFKA_GROUP_ID: 'persister-group'
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongodb:
    image: "mongo:3.2"
    restart: always
    user: "mongodb"
    logging:
      driver: json-file
      options:
        max-size: 100m

  mosca-redis:
    image: "redis:5.0.5-alpine3.10"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  iotagent-mqtt:
    image: dojot/iotagent-mosca:development
    depends_on:
      - mosca-redis
      - kafka
      - data-broker
      - auth
      - ejbca
    ports:
      - 1883:1883
      - 8883:8883
    restart: always
    environment:
      DOJOT_MANAGEMENT_USER: 'iotagent-mqtt'
      KAFKA_GROUP_ID: 'iotagent-mqtt-group'
      ALLOW_UNSECURED_MODE: 'false'
      LOG_LEVEL: 'info'
    logging:
      driver: json-file
      options:
        max-size: 100m

  gui:
    image: dojot/gui:development
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  data-broker:
    image: dojot/data-broker:development
    restart: always
    depends_on:
      - kafka
      - data-broker-redis
      - auth
    environment:
      DOJOT_MANAGEMENT_USER: 'data-broker'
      KAFKA_GROUP_ID: 'data-broker-group'
      SERVICE_PORT: ${DATA_BROKER_SERVICE_PORT}
      DATA_BROKER_URL: 'http://data-broker:${DATA_BROKER_SERVICE_PORT}'
      LOG_LEVEL: 'info'
    logging:
      driver: json-file
      options:
        max-size: 100m

  data-broker-redis:
    image: "redis:5.0.5-alpine3.10"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  device-manager-redis:
    image: "redis:5.0.5-alpine3.10"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

################
# iot-agent lwm2m
################
  iotagent-lwm2m:
    image: dojot/iotagent-leshan:development
    depends_on:
      - kafka
      - data-broker
      - auth
      - image-manager
    environment:
      DOJOT_MANAGEMENT_USER: 'iotagent-lwm2m'
      KAFKA_GROUP_ID: "iotagent-lwm2m-group"
      # The FILE_SERVER_ADDRESS should be filled with an address accesible to the devices that want to update the firmware
      FILE_SERVER_ADDRESS: 127.0.0.1
    ports:
      - 5683:5683/udp # configuration coap port
      - 5684:5684/udp # configuration dtls port
      - 5693:5693/udp # file server coap port
      - 5694:5694/udp # file server dtls port
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  image-manager:
    image: dojot/image-manager:development
    restart: always
    depends_on:
      - postgres
      - minio
    logging:
      driver: json-file
      options:
        max-size: 100m
    environment:
      # TODO: The following should be unique for each environment
      S3ACCESSKEY: 9HEODSF6WQN5EZ39DM7Z
      S3SECRETKEY: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W

  minio:
    image: "minio/minio"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m
    environment:
      # TODO: The following should be unique for each environment
      MINIO_ACCESS_KEY: 9HEODSF6WQN5EZ39DM7Z
      MINIO_SECRET_KEY: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W
    command: server /data

  device-manager:
    image: dojot/device-manager:development
    restart: always
    environment:
      # TODO: Fill these env variables with suitable values
      - DEV_MNGR_CRYPTO_PASS="kamehameHA"
      - DEV_MNGR_CRYPTO_IV=1234567890123456
      - DEV_MNGR_CRYPTO_SALT="shuriken"
    depends_on:
      - postgres
      - kafka
      - data-broker
      - device-manager-redis
    logging:
      driver: json-file
      options:
        max-size: 100m

  auth-redis:
    image: "redis:5.0.5-alpine3.10"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  auth:
    image: dojot/auth:development
    restart: always
    depends_on:
      - apigw
      - auth-redis
      - postgres
    environment:
      AUTH_DB_HOST: "postgres"
      AUTH_DB_USER: "kong"
      AUTH_KONG_URL: "http://apigw:8001"
      AUTH_CACHE_HOST: "auth-redis"
      # This is used to select the type of cache to be used. Allowed values are "redis" or "nocache"
      AUTH_CACHE_NAME: "redis"
      DOJOT_MANAGEMENT_USER: 'auth'
      KAFKA_GROUP_ID: 'auth-group'
    logging:
      driver: json-file
      options:
        max-size: 100m

  postgres:
    image: "postgres:9.4.24-alpine"
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: 100m

  postgres-users:
    image: "postgres:9.4.24-alpine"
    restart: on-failure
    command: >
      bash -c "if ! psql -h postgres -U postgres -t -c '\du' | cut -d \| -f 1 | grep -qw kong; then
                   echo 'creating user kong'
                   createuser kong -d -h postgres -U postgres
               else
                   echo 'user kong exists'
               fi
               if ! psql -h postgres -U postgres -lqt | cut -d \| -f 1 | grep -qw kong; then
                   echo 'creating database kong'
                   createdb kong -U kong -h postgres
               else
                   echo 'database kong exists'
               fi"
    depends_on:
      - postgres
    logging:
      driver: json-file
      options:
        max-size: 100m

  kong-migration:
    image: dojot/kong:development
    depends_on:
      - postgres
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
    command: kong migrations up
    restart: on-failure

  apigw:
    image: dojot/kong:development
    restart: always
    depends_on:
      - postgres
      - kong-migration
    ports:
      - "8000:8000"
    environment:
      KONG_DATABASE: "postgres"
      KONG_PG_HOST: "postgres"
    volumes:
      - ./apigw/plugins/pep-kong:/plugins/pep-kong:Z
    logging:
      driver: json-file
      options:
        max-size: 100m

  kong-config:
    image: appropriate/curl
    entrypoint: /opt/kong.config.sh
    restart: on-failure
    depends_on:
      - apigw
    volumes:
      - ./kong.config.sh:/opt/kong.config.sh:Z

  flowbroker-redis:
    image: "redis:5.0.5-alpine3.10"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  flowbroker:
    image: dojot/flowbroker:development
    restart: always
    environment:
      DEPLOY_ENGINE: "docker"
      FLOWBROKER_NETWORK: ${FLOWBROKER_NETWORK}
      DOJOT_MANAGEMENT_USER: 'flowbroker'
      KAFKA_GROUP_ID: 'flowbroker-group'
    depends_on:
      - rabbitmq
      - kafka
      - mongodb
      - auth
      - flowbroker-context-manager
      - flowbroker-redis
    networks:
      - default
      - flowbroker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:Z

  flowbroker-context-manager:
    image: dojot/flowbroker-context-manager:development
    restart: always
    environment:
      ZOOKEEPER_HOST: zookeeper
      ZOOKEEPER_PORT: 2181
      ZEROMQ_PORT: 5556
      HOLD_LOCK_TIMEOUT: 10000
      WAIT_LOCK_TIMEOUT: 30000
    depends_on:
      - zookeeper
    networks:
      - default
      - flowbroker

  rabbitmq:
    image: "rabbitmq:3.7.17-alpine"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  zookeeper:
    image: "zookeeper:3.4.14"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  kafka:
    image: "wurstmeister/kafka:2.12-2.1.1"
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_NUM_PARTITIONS: 10
      JMX_PORT: 1099
    logging:
      driver: json-file
      options:
        max-size: 100m

  ejbca:
    image: "dojot/ejbca-rest:development"
    environment:
      DOJOT_MANAGEMENT_USER: 'ejbca'
      KAFKA_GROUP_ID: 'ejbca-group'
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m


  data-manager:
    image: "dojot/data-manager:development"
    restart: always
    depends_on:
      - flowbroker
      - device-manager

  backstage:
    image: "dojot/backstage:development"
    restart: always
    depends_on:
      - postgres

  cron:
    image: dojot/cron:development
    depends_on:
      - kafka
      - data-broker
      - auth
      - mongodb
    ports:
      - 5000:5000
    restart: always

networks:
  flowbroker:
