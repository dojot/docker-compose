version: '3.8'

# https://docs.docker.com/config/containers/logging/json-file/
# https://docs.docker.com/config/containers/logging/log_tags/
x-logging: &loki-logging
  logging:
    driver: 'json-file'
    options:
      max-size: '50m'
      max-file: '3'
      tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

x-networking: &dojot-networking
  networks:
    - default

services:
  ## main
  create_secrets:
    # To recreate the secrets, reset the files: MINIO_ACCESS_KEY, MINIO_SECRET_KEY which are in the docker-compose/secrets folder.
    image: dojot/ubuntu_openssl:latest
    command:
      - "./secrets/create_secrets.sh"
    restart: on-failure
    volumes:
      - ./keycloak/customRealmRepresentation.json:/opt/dojot/customRealmRepresentation.json:Z
      - ./secrets:/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "create-secrets"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  zookeeper:
    image: "confluentinc/cp-zookeeper:5.5.0"
    restart: always
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
    environment:
      ZOOKEEPER_REPLICAS: "1"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_ELECTION_PORT: 3888
      ZOOKEEPER_SERVER_PORT: 2888
      ZOOKEEPER_HEAP_SIZE: "2G"
      ZOOKEEPER_INIT_LIMIT: "5"
      ZOOKEEPER_LOG_LEVEL: "INFO"
      ZOOKEEPER_MAX_CLIENT_CNXNS: "100"
      ZOOKEEPER_MAX_SESSION_TIMEOUT: "40000"
      ZOOKEEPER_MIN_SESSION_TIMEOUT: "4000"
      ZOOKEEPER_PURGE_INTERVAL: "0"
      ZOOKEEPER_SNAP_RETAIN_COUNT: "3"
      ZOOKEEPER_SYNC_LIMIT: "10"
      ZOOKEEPER_TICK_TIME: "2000"
    volumes:
      - zookeeper-volume:/var/lib/zookeeper/data
      - zookeeper-log-volume:/var/lib/zookeeper/log
      - zookeeper-secrets-volume:/etc/zookeeper/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "zookeeper"
      - "basic-http"
      - "basic-mqtt"
      - "complete"


  kafka:
    image: confluentinc/cp-kafka:5.5.0
    depends_on:
      - zookeeper
    restart: always
    hostname: "kafka"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_LOG_RETENTION_MINUTES: "30" # is the max time an individual message should remain
      KAFKA_LOG_SEGMENT_BYTES: "262144000"
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: "30000"
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    volumes:
      - kafka-volume:/var/lib/kafka/data
      - kafka-secrets-volume:/etc/kafka/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "kafka"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  postgres:
    image: dojot/postgres:9.5.21-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:Z
      - postgres-volume:/var/lib/postgresql/data
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "postgres"
      - "basic-http"
      - "basic-mqtt"
      - "complete"


  keycloak:
    image: dojot/keycloak:${DOJOT_BACKEND_VERSION}
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always
    volumes:
      - ./keycloak/customRealmRepresentation.json:/opt/dojot/customRealmRepresentation.json:Z
      - ./secrets:/secrets
    environment:
      JAVA_OPTS_APPEND: "-Dkeycloak.profile.feature.impersonation=disabled -Dkeycloak.profile.feature.upload_scripts=enabled"
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_PORT: 5432
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      ROOT_LOGLEVEL: INFO
      KEYCLOAK_LOGLEVEL: INFO
      KEYCLOAK_USER: ${KEYCLOAK_MASTER_USER:-master}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_MASTER_PASSWORD:-master}
      # KEYCLOAK_HOSTNAME: keycloak #${DOJOT_DOMAIN_NAME:-localhost}
      KEYCLOAK_FRONTEND_URL: '${DOJOT_URL:-http://localhost:8000}/auth'
      PROXY_ADDRESS_FORWARDING: "true"
      DOJOT_ROOT_URL: ${DOJOT_URL:-http://localhost:8000}
      DOJOT_ADMIN_PASSWORD: admin #${KEYCLOAK_ADMIN_PASSWORD_TEMP}
      DOJOT_REALM_SSL_MODE: 'NONE' #${KEYCLOAK_REALM_SSL_MODE:-NONE}
      DOJOT_KAFKA_SERVERS: kafka:9092
      DOJOT_CUSTOM_REALM_REP_FILE: "/opt/dojot/customRealmRepresentation.json"
      DOJOT_SECRETS_PATH: "/secrets/"
      # DOJOT_SMTP_HOST: smtp.gmail.com
      # DOJOT_SMTP_PORT: "587"
      # DOJOT_SMTP_SSL: "false"
      # DOJOT_SMTP_START_TLS: "true"
      # DOJOT_SMTP_FROM: noreply@dojot.iot
      # DOJOT_SMTP_FROM_DISPLAY_NAME: "IoT Dojot platform"
      # DOJOT_SMTP_USERNAME: smtp@dojot.iot
      # DOJOT_SMTP_PASSWORD: smtp.secret
    healthcheck:
      test: "curl -f http://localhost:8080/auth || exit 1"
      start_period: 20s
      interval: 10s
      timeout: 10s
      retries: 5
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "keycloak"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  keycloak-init:
    image: dojot/docker5gmedia-appropriate-curl-jq
    entrypoint: /opt/keycloak.config.sh
    restart: on-failure
    environment:
      KEYCLOAK_MASTER_USER: ${KEYCLOAK_MASTER_USER:-master}
      KEYCLOAK_MASTER_PASSWORD: ${KEYCLOAK_MASTER_PASSWORD:-master}
    depends_on:
      - keycloak
    volumes:
      - ./keycloak/keycloak.config.sh:/opt/keycloak.config.sh:Z
      - ./secrets:/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "keycloak"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  keycloak-proxy:
    image: dojot/keycloak-proxy:${DOJOT_BACKEND_VERSION}
    restart: always
    depends_on:
      - keycloak
    environment:
      KEYCLOAKPROXY_KEYCLOAK_URI: http://keycloak:8080
      KEYCLOAKPROXY_KEYCLOAK_REALM: master
      KEYCLOAKPROXY_KEYCLOAK_PROXY_ID: ${KEYCLOAK_PROXY_CLIENT_ID:-keycloak-proxy}
      KEYCLOAKPROXY_KEYCLOAK_PROXY_USERNAME: ${KEYCLOAK_PROXY_USER:-user-keycloak-proxy}
      KEYCLOAKPROXY_KEYCLOAK_PROXY_SECRET_FILE: ${KEYCLOAK_PROXY_SECRET_FILE:-KEYCLOAK_PROXY}
      KEYCLOAKPROXY_KEYCLOAK_PROXY_PASSWORD_FILE: ${KEYCLOAK_PROXY_USER_PASSWORD_FILE:-KEYCLOAK_PROXY_USER}
    volumes:
      - ./secrets:/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "keycloak"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  device-manager:
    image: dojot/device-manager:${DOJOT_BACKEND_VERSION}
    restart: always
    environment:
      # TODO: Fill these env variables with suitable values
      DEV_MNGR_CRYPTO_PASS: kamehameHA
      DEV_MNGR_CRYPTO_IV: 1234567890123456
      DEV_MNGR_CRYPTO_SALT: shuriken
      DBHOST: postgres
      DBUSER: devm
      DBPASS: devm
      LOG_LEVEL: INFO
    depends_on:
      - postgres
      - kafka
    depends_on:
      postgres:
        condition: service_healthy
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "device-manager"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  device-manager-sidecar:
    image: dojot/keycloak-microservice-sidecar:${DOJOT_BACKEND_VERSION}
    restart: always
    depends_on:
      - keycloak
      - keycloak-proxy
      - device-manager
    environment:
      HOSTNAME: device-manager-sidecar-1
      KEYCLOAKMICROSERVICESIDECAR_PROXY_PORT: "5000"
      KEYCLOAKMICROSERVICESIDECAR_SERVER_URL: http://device-manager:5000
      KEYCLOAKMICROSERVICESIDECAR_KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAKMICROSERVICESIDECAR_KEYCLOAK_CLIENT_ID: dojot-device-manager-sidecar
      KEYCLOAKMICROSERVICESIDECAR_KEYCLOAK_CLIENT_SECRET_FILE: dojot-device-manager-sidecar
      KEYCLOAKMICROSERVICESIDECAR_KEYCLOAK_TENANTS_URL: http://keycloak-proxy:8081/api/v1/tenant
      KEYCLOAKMICROSERVICESIDECAR_CONSUMER_GROUP_ID: device-manager-sidecar-1
      KEYCLOAKMICROSERVICESIDECAR_PROXY_AUTH_MODE: "keycloak"
      KEYCLOAKMICROSERVICESIDECAR_PROXY_TOKEN_INSERT: "legacy"
    volumes:
      - ./secrets:/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "device-manager"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  mongodb:
    image: dojot/mongo:3.2
    restart: always
    user: "mongodb"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - mongodb-volume:/data/db
      - mongodb-cfg-volume:/data/configdb
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "mongodb"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  ## Security
  x509-ejbca: # this service cannot be called 'ejbca'
    image: dojot/ejbca:${DOJOT_BACKEND_VERSION}
    depends_on:
      - postgres
    restart: always
    hostname: "x509-ejbca" # The 'hostname' must have the same name as the 'service'
                           # and cannot be called 'ejbca' so as not to conflict with
                           # the ejbca's internal End-Entity (hidden)
    domainname: "" # the 'domainname' must remain empty unless the
                   # service name contains periods (such as an FQDN)
    environment:
      DATABASE_JDBC_URL: jdbc:postgresql://postgres:5432/ejbca?characterEncoding=UTF-8
      DATABASE_USER: ejbca
      DATABASE_PASSWORD: ejbca
      EJBCA_EXTERNAL_ACCESS: "true" # to make the Wildfly server visible on the x509-identity-mgmt
      EJBCA_SERVER_CERT_REGEN: "true" # Used to force the generation of a new certificate for the server
      # EJBCA_LOCK_FILE_TIMEOUT: "0" # Used to break the '.lock' file
      # EJBCA_ADMIN_USER: "true" # Access to the EJBCA web interface is useful for debugging purposes
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8080/ejbca/publicweb/healthcheck/ejbcahealth"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 2m
    volumes:
      - "ejbca-volume:/mnt/persistent"
      - "ejbca-client-tls-volume:/opt/tls"
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "x509"
      - "basic-mqtt"
      - "complete"

  x509-identity-mgmt:
    image: dojot/x509-identity-mgmt:${DOJOT_BACKEND_VERSION}
    depends_on:
      - x509-ejbca
      - postgres
      - mongodb
      - kafka
    restart: always
    environment:
      NODE_ENV: production
      X509IDMGMT_LOGGER_CONSOLE_LEVEL: info
      X509IDMGMT_CERTIFICATE_BELONGSTO_APPLICATION: '["iotagent-mqtt", "v2k-bridge", "k2v-bridge", "http-agent-x509"]'
      X509IDMGMT_MONGO_CONN_URI: "mongodb://mongodb:27017/x509-identity-mgmt"
      X509IDMGMT_EJBCA_HEALTHCHECK_URL: "http://x509-ejbca:8080/ejbca/publicweb/healthcheck/ejbcahealth"
      X509IDMGMT_EJBCA_WSDL: "https://x509-ejbca:8443/ejbca/ejbcaws/ejbcaws?wsdl"
      X509IDMGMT_KEYCLOAK_URL: "http://keycloak:8080"
      X509IDMGMT_DEVICEMGR_DEVICE_URL: "http://device-manager-sidecar:5000/device"
      # X509IDMGMT_CERTIFICATE_CHECK_SUBJECTDN: "true" # add to CN `tenant:deviceid`
      # ROARR_LOG: "true" # healthcheck is using 'Roarr' to implement logging.
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9000/health"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 2m
    volumes:
      - "ejbca-client-tls-volume:/opt/tls"
      - ./secrets:/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "x509"
      - "basic-mqtt"
      - "complete"


  acl-redis:
    image: dojot/redis:6.0.4-alpine3.11
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    volumes:
      - acl-redis-volume:/data
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "certificate-acl"
      - "basic-mqtt"
      - "complete"

  certificate-acl:
    image: dojot/certificate-acl:${DOJOT_BACKEND_VERSION}
    environment:
      CERTIFICATE_ACL_LOGGER_CONSOLE_LEVEL: "info"
      CERTIFICATE_ACL_KEYCLOAK_CLIENT_SECRET_FILE: "dojot-certificate-acl"
      CERTIFICATE_ACL_KEYCLOAK_URL: "http://keycloak:8080"
    volumes:
      - ./secrets:/secrets
    depends_on:
      - acl-redis
      - kafka
      - keycloak
      - keycloak-proxy
      # - x509-identity-mgmt
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "certificate-acl"
      - "basic-mqtt"
      - "complete"

  basic-auth:
    image: dojot/device-basic-authentication:${DOJOT_BACKEND_VERSION}
    restart: always
    ports:
      - "3002:3000"
    depends_on:
      - kafka
      - mongodb
      - device-manager
    environment:
      BASIC_AUTH_LOG_CONSOLE_LEVEL: 'info'
      BASIC_AUTH_LOG_VERBOSE: "true"
      BASIC_AUTH_PRODUCER_METADATA_BROKER_LIST: kafka:9092
      BASIC_AUTH_URL_DEVICE: "http://device-manager-sidecar:5000/device"
      BASIC_AUTH_URL_DEVICES: "http://device-manager-sidecar:5000/device"
    volumes:
      - ./secrets:/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "basic-auth"
      - "basic-http"
      - "complete"

  ## kong
  kong-migrations:
    image: dojot/kong:feature-api-gateway-kong  #dojot/kong:${DOJOT_BACKEND_VERSION}
    command: kong migrations bootstrap
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "kong"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  kong-migrations-up:
    image:  dojot/kong:feature-api-gateway-kong  #dojot/kong:${DOJOT_BACKEND_VERSION}
    command: kong migrations up && kong migrations finish
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "kong"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  letsencrypt-nginx:
    depends_on:
      - apigw
      - kong-config
    image: nginx:latest
    restart: always
    volumes:
      - ./letsencrypt-nginx/nginx-challenge.conf:/etc/nginx/conf.d/default.conf
      - /dojot/letsencrypt-site:/usr/share/nginx/html
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "letsencrypt"
      - "complete"

  apigw:
    image: dojot/kong:feature-api-gateway-kong  #dojot/kong:feature-api-gateway-kong  #dojot/kong:${DOJOT_BACKEND_VERSION}
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_started
      kong-migrations-up:
        condition: service_started
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_LISTEN: 0.0.0.0:${DOJOT_HTTP_PORT:-8000}, 0.0.0.0:${DOJOT_HTTPS_PORT:-8443} ssl
      KONG_PG_PASSWORD: kong
      KONG_LOG_LEVEL: info
      # To enable HTTPs external, it is necessary to configure public certificates
      # issued by a public CA, such as lets encrypt in KONG_SSL_CERT.
      KONG_SSL_CERT: ${KONG_SSL_CERT:-}
      KONG_SSL_CERT_KEY: ${KONG_SSL_CERT_KEY:-}
      KONG_LUA_SSL_TRUSTED_CERTIFICATE: ${KONG_SSL_CERT_CA:-/etc/ssl/certs/ca-certificates.crt}
      DOJOT_PLUGIN_SSL_VERIFY: ${SSL_VERIFY:-true}
      # To enable HTTPs internal with mutual authentication, it is necessary to configure public certificates
      # issued by a EJBCA internal from dojot in KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE.
      # KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE_KEY: /certs/example-internal.key
      # KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE: /certs/example-internal.crt
      # Root cerficate from internal CA
      # KONG_NGINX_PROXY_PROXY_SSL_TRUSTED_CERTIFICATE: /certs/root-ca-internal.crt
      # KONG_NGINX_PROXY_PROXY_SSL_VERIFY: "on"
      # KONG_NGINX_PROXY_PROXY_SSL_VERIFY_DEPTH: "2"
    ports:
      - ${DOJOT_HTTP_PORT:-8000}:${DOJOT_HTTP_PORT:-8000}
      - ${DOJOT_HTTPS_PORT:-8443}:${DOJOT_HTTPS_PORT:-8443}
      # # If you can't run the apigw (kong) setting the
      # # DOJOT_HTTP_PORT values to 80 and DOJOT_HTTPS_PORT to 443,
      # # an alternative is to uncomment the 2 lines below
      # # (- 443:${DOJOT_HTTPS_PORT:-8443} and 80:{DOJOT_HTTP_PORT:-8000}),
      # # so dojot will be accessible through the default http and https ports,
      # # but remembering that the defined ports DOJOT_HTTP_PORT and DOJOT_HTTPS_PORT must
      # # also be available.
      # - 80:${DOJOT_HTTP_PORT:-8000}
      # - 443:${DOJOT_HTTPS_PORT:-8443}
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /dojot/etc/letsencrypt/:/dojot/etc/letsencrypt/:Z
      - ./certs/:/certs/:Z
      - ./ca/:/ca/:Z
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "kong"
      - "basic-http"
      - "basic-mqtt"
      - "complete"
    restart: always
    ## ## **`Gateway-static-dojot_default-1`**
    ## This setting `extra_hosts` is to be used together with the static ip of the
    ## docker network gateway, `dojot_default`. This can be useful when
    ## you are not using a domain that can be used internally in containers.
    ## Part 2 (Gateway-static-dojot_default-2) in `backstage` service and `extra_hosts`
    ## and Part 3 (Gateway-static-dojot_default-3) in `networks`
    ## should also be uncommented.
    # extra_hosts:
    #   - "${DOJOT_DOMAIN_NAME}:127.0.0.1"


  kong-config:
    image: dojot/appropriate-curl
    entrypoint: /opt/kong.config.sh
    restart: on-failure
    environment:
      DOJOT_DOMAIN_NAME: '${DOJOT_DOMAIN_NAME:-localhost}'
      DOJOT_KONG_ROUTE_ALLOW_ONLY_HTTPS: ${DOJOT_KONG_ROUTE_ALLOW_ONLY_HTTPS:-false}
    depends_on:
      - apigw
    volumes:
      - ./kong/kong.config.sh:/opt/kong.config.sh:Z
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "kong"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  ##kafka-ws
  kafka-ws:
    image: dojot/kafka-ws:${DOJOT_BACKEND_VERSION}
    depends_on:
      - kafka
      - kafka-ws-redis
    environment:
      KAFKA_WS_SERVER_JWT_EXP_TIME: "true"
      KAFKA_WS_REDIS_HOST: kafka-ws-redis
      KAFKA_WS_LOG_CONSOLE_LEVEL: "info"
      # The KAFKA_WS_TICKET_SECRET should be unique for each environment
      KAFKA_WS_TICKET_SECRET: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "kafka-ws"
      - "complete"


  kafka-ws-redis:
    image: dojot/redis:6.0.4-alpine3.11
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    volumes:
      - kafka-ws-redis-volume:/data
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "kafka"
      - "complete"

  ## GUI
  backstage-redis:
    image: dojot/redis:6.0.4-alpine3.11
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    restart: always
    volumes:
      - backstage-redis-volume:/data
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "backstage"
      - "front-end"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  backstage:
    image: dojot/backstage:${DOJOT_FRONTEND_VERSION}
    restart: always
    depends_on:
      - keycloak
      - backstage-redis
      - postgres
    volumes:
      - ./certs/:/certs/:Z
      - ./ca/:/ca/:Z
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "backstage"
      - "front-end"
      - "basic-http"
      - "basic-mqtt"
      - "complete"
    environment:
      BS_SESSION_SECRET: XeQNTdxLl8UGiOpgyEvm
      BS_LOG_CONSOLE_LEVEL: 'info'
      BS_APP_BASE_URL: ${DOJOT_URL:-http://localhost:8000}
      BS_GRAPHQL_SECURE: ${DOJOT_ENABLE_HTTPS_ONLY:-false}
      BS_GRAPHQL_SSL_CA: ${KONG_SSL_CERT_CA:-}
      BS_GRAPHQL_BASE_URL: ${DOJOT_URL:-http://apigw:8000}
      BS_SESSION_DOMAIN: ${DOJOT_DOMAIN_NAME:-localhost}
      BS_SESSION_COOKIE_HTTPS: ${DOJOT_ENABLE_HTTPS_ONLY:-false}
      BS_KEYCLOAK_URL_EXTERNAL: '${DOJOT_URL:-http://localhost:8000}/auth'
      BS_KEYCLOAK_URL_INTERNAL: '${DOJOT_URL:-http://apigw:8000}/auth'
      BS_KEYCLOAK_SECURE: ${DOJOT_ENABLE_HTTPS_ONLY:-false}
      BS_KEYCLOAK_SSL_CA: ${KONG_SSL_CERT_CA:-}
      BS_PROXY_TARGET: ${DOJOT_URL:-http://apigw:8000}
      BS_PROXY_SECURE: ${DOJOT_BACKSTAGE_PROXY_SECURE:-false}
      BS_USE_INFLUXDB: "true"

  ## IoT-Agent
  http-agent-redis-x509:
    image: dojot/redis:6.0.4-alpine3.11
    restart: always
    volumes:
      - http-agent-redis-x509-volume:/data
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "http-agent-x509"
      - "complete"


  http-agent-cert-sidecar-x509:
    image: dojot/cert-sidecar:${DOJOT_BACKEND_VERSION}
    depends_on:
      - x509-identity-mgmt
    environment:
      CERT_SC_APP_SIDECAR_TO: 'http-agent-x509'
      CERT_SC_LOG_CONSOLE_LEVEL: 'info'
      CERT_SC_CERTS_HOSTNAMES: '["http-agent-x509", "${DOJOT_DOMAIN_NAME:-localhost}"]'
      HOSTNAME: http-agent-x509
      CERT_SC_CERTS_FILES_BASEPATH: /certs
      CERT_SC_CERTS_FILES_CA: ca.crt
      CERT_SC_CERTS_FILES_CERT: http-agent.crt
      CERT_SC_CERTS_FILES_KEY: http-agent.key
      CERT_SC_CERTS_FILES_CRL: ca.crl
      CERT_SC_CERTS_FILES_CABUNDLE: cabundle.crt
      CERT_SC_CRON_CABUNDLE: "true"
    volumes:
      - http-agent-cert-sidecar-x509-volume:/certs
      - ./secrets:/secrets
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "http-agent-x509"
      - "complete"


  http-agent-x509:
    image: dojot/http-agent:${DOJOT_BACKEND_VERSION}
    restart: always
    depends_on:
      - kafka
      - certificate-acl
    ports:
      - 3000:3000
    environment:
      HTTP_AGENT_HTTPS_CERT: '/certs/http-agent.crt'
      HTTP_AGENT_HTTPS_KEY: '/certs/http-agent.key'
      HTTP_AGENT_HTTPS_CA: '/certs/cabundle.crt'
      HTTP_AGENT_SECURITY_CRL: '/certs/ca.crl'
      HTTP_AGENT_SECURITY_CERT_DIRECTORY: '/certs'
      HTTP_AGENT_REDIS_HOST: 'http-agent-redis-x509'
      HTTP_AGENT_LOG_CONSOLE_LEVEL: 'info'
    volumes:
      - http-agent-cert-sidecar-x509-volume:/certs
      - ./secrets:/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "http-agent-x509"
      - "complete"

  http-agent-redis-basic:
    image: dojot/redis:6.0.4-alpine3.11
    restart: always
    volumes:
      - http-agent-redis-basic-volume:/data
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "http-agent-basic"
      - "basic-http"
      - "complete"

  http-agent-basic:
    image: dojot/http-agent:${DOJOT_BACKEND_VERSION}
    restart: always
    depends_on:
      - kafka
    ports:
      - 3001:3001
    environment:
      HTTP_AGENT_LOG_CONSOLE_LEVEL: 'debug'
      HTTP_AGENT_SECURITY_UNSECURE_MODE_ONLY: 'true'
      HTTP_AGENT_SECURITY_UNSECURE_MODE: 'true'
      HTTP_AGENT_SECURITY_AUTHORIZATION_MODE: 'basic-auth'
      HTTP_AGENT_REDIS_HOST: 'http-agent-redis-basic'
    volumes:
      - ./secrets:/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "http-agent-basic"
      - "basic-http"
      - "complete"

  iotagent-mqtt:
    image: dojot/vernemq-dojot:${DOJOT_BACKEND_VERSION}
    command: ["/bin/bash", "-c", "echo $$VERNEMQ_CONF | base64 -d > /etc/vernemq/vernemq.conf; echo $$VM_ARGS | base64 -d > /etc/vernemq/vm.args; start_vernemq"]
    depends_on:
      - iotagent-mqtt-cert-sidecar
      - certificate-acl
    ports:
      - 1883:1883 # You can comment this line (- 1883:1883) to disable insecure mode without TLS. (this is recommended)
      - 8883:8883
    environment:
      VERNEMQ_CONF: bWV0YWRhdGFfcGx1Z2luID0gdm1xX3N3YwpwbHVnaW5zLnZtcV9wYXNzd2QgPSBvZmYKcGx1Z2lucy52bXFfYWNsID0gb2ZmCnBsdWdpbnMuZG9qb3RfZGlzY29ubmVjdF9wbHVnaW4ucGF0aCA9IC92ZXJuZW1xL2Rvam90X2Rpc2Nvbm5lY3RfcGx1Z2luL2RlZmF1bHQKcGx1Z2lucy5kb2pvdF9kaXNjb25uZWN0X3BsdWdpbiA9IG9uCnBsdWdpbnMuZG9qb3RfZGlzY29ubmVjdF9wbHVnaW4ucHJpb3JpdHkgPSAyCnBsdWdpbnMuZG9qb3RfYWNsX3BsdWdpbi5wYXRoID0gL3Zlcm5lbXEvZG9qb3RfYWNsX3BsdWdpbi9kZWZhdWx0CnBsdWdpbnMuZG9qb3RfYWNsX3BsdWdpbiA9IG9uCnBsdWdpbnMuZG9qb3RfYWNsX3BsdWdpbi5wcmlvcml0eSA9IDIKbGV2ZWxkYi5tYXhpbXVtX21lbW9yeS5wZXJjZW50ID0gMjAKbG9nLmNvbnNvbGUgPSBjb25zb2xlCmxpc3RlbmVyLm1heF9jb25uZWN0aW9ucyA9IDIwMDAwMApsaXN0ZW5lci5ucl9vZl9hY2NlcHRvcnMgPSAxMDAKbWF4X2luZmxpZ2h0X21lc3NhZ2VzID0gMjAKbWF4X29ubGluZV9tZXNzYWdlcyA9IDEwMDAwCmxpc3RlbmVyLmh0dHAuZGVmYXVsdCA9IDAuMC4wLjA6ODg4OApsaXN0ZW5lci5zc2wuZGVmYXVsdCA9IDAuMC4wLjA6ODg4MwpsaXN0ZW5lci5zc2wuZGVmYXVsdC5jYWZpbGUgPSAgL3Zlcm5lbXEvY2VydC9jYWJ1bmRsZS5jcnQKbGlzdGVuZXIuc3NsLmRlZmF1bHQuY2VydGZpbGUgPSAvdmVybmVtcS9jZXJ0L2lvdGFnZW50LW1xdHQuY3J0Cmxpc3RlbmVyLnNzbC5kZWZhdWx0LmtleWZpbGUgPSAvdmVybmVtcS9jZXJ0L2lvdGFnZW50LW1xdHQua2V5Cmxpc3RlbmVyLnNzbC5kZWZhdWx0LmNybGZpbGUgPSAgL3Zlcm5lbXEvY2VydC9jYS5jcmwKbGlzdGVuZXIuc3NsLmRlZmF1bHQudXNlX2lkZW50aXR5X2FzX3VzZXJuYW1lID0gb24KbGlzdGVuZXIuc3NsLmRlZmF1bHQucmVxdWlyZV9jZXJ0aWZpY2F0ZSA9IG9uCmxpc3RlbmVyLnNzbC5pbnRlcm5hbCA9IDAuMC4wLjA6OTg4MwpsaXN0ZW5lci5zc2wuaW50ZXJuYWwuY2FmaWxlID0gIC92ZXJuZW1xL2NlcnQvY2FidW5kbGUuY3J0Cmxpc3RlbmVyLnNzbC5pbnRlcm5hbC5jZXJ0ZmlsZSA9IC92ZXJuZW1xL2NlcnQvaW90YWdlbnQtbXF0dC5jcnQKbGlzdGVuZXIuc3NsLmludGVybmFsLmtleWZpbGUgPSAvdmVybmVtcS9jZXJ0L2lvdGFnZW50LW1xdHQua2V5Cmxpc3RlbmVyLnNzbC5pbnRlcm5hbC5jcmxmaWxlID0gIC92ZXJuZW1xL2NlcnQvY2EuY3JsCmxpc3RlbmVyLnNzbC5pbnRlcm5hbC5yZXF1aXJlX2NlcnRpZmljYXRlID0gb24=
      VM_ARGS: K1AgMjU2MDAwCi1lbnYgRVJMX01BWF9FVFNfVEFCTEVTIDI1NjAwMAotZW52IEVSTF9DUkFTSF9EVU1QIC92ZXJuZW1xL2xvZy9lcmxfY3Jhc2guZHVtcAotZW52IEVSTF9GVUxMU1dFRVBfQUZURVIgMAotZW52IEVSTF9NQVhfUE9SVFMgMjYyMTQ0CitBIDY0Ci1zZXRjb29raWUgdm1xCi1uYW1lIHZtcUBpb3RhZ2VudC1tcXR0LmRvam90LmlvdAorSyB0cnVlCitXIHcKLXNtcCBlbmFibGU=
    restart: always
    hostname: iotagent-mqtt
    domainname: dojot.iot
    volumes:
      - iotagent-mqtt-volume:/vernemq/data
      - iotagent-mqtt-log-volume:/vernemq/log
      - iotagent-mqtt-etc-volume:/vernemq/etc
      - iotagent-mqtt-cert-side-volume:/vernemq/cert
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "iotagent-mqtt"
      - "basic-mqtt"
      - "complete"

  iotagent-mqtt-keycloak-sidecar:
    image: dojot/keycloak-microservice-sidecar:${DOJOT_BACKEND_VERSION}
    environment:
      HOSTNAME: 'iotagent-mqtt-keycloak-sidecar-1'
      KEYCLOAKMICROSERVICESIDECAR_LOGGER_CONSOLE_LEVEL: "info"
      KEYCLOAKMICROSERVICESIDECAR_SERVER_URL: 'http://certificate-acl:3000'
      KEYCLOAKMICROSERVICESIDECAR_PROXY_PORT: "3000"
      KEYCLOAKMICROSERVICESIDECAR_KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAKMICROSERVICESIDECAR_KEYCLOAK_CLIENT_ID: dojot-iotagent-mqtt-sidecar
      KEYCLOAKMICROSERVICESIDECAR_KEYCLOAK_CLIENT_SECRET_FILE: dojot-iotagent-mqtt-sidecar
      KEYCLOAKMICROSERVICESIDECAR_KEYCLOAK_TENANTS_URL: http://keycloak-proxy:8081/api/v1/tenant
      KEYCLOAKMICROSERVICESIDECAR_CONSUMER_GROUP_ID: dojot-iotagent-mqtt-sidecar
      KEYCLOAKMICROSERVICESIDECAR_PROXY_AUTH_MODE: "legacy"
      KEYCLOAKMICROSERVICESIDECAR_PROXY_TOKEN_INSERT: "keycloak"
    volumes:
      - ./secrets:/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "iotagent-mqtt"
      - "basic-mqtt"
      - "complete"

  iotagent-mqtt-cert-sidecar:
    image: dojot/cert-sidecar:${DOJOT_BACKEND_VERSION}
    depends_on:
      - x509-identity-mgmt
    environment:
      CERT_SC_APP_SIDECAR_TO: 'iotagent-mqtt'
      CERT_SC_LOG_CONSOLE_LEVEL: 'info'
      # About CERT_SC_CERTS_HOSTNAMES
      #     Servers hostname/ip (the list of host to which the device connects); The value "iotagent-mqtt" is mandatory, it is used by v2k and k2v.
      #     It's the old EXTERNAL_SERVER_HOSTNAME and equivalent to MOSCA_TLS_DNS_LIST.
      CERT_SC_CERTS_HOSTNAMES: '["iotagent-mqtt", "${DOJOT_DOMAIN_NAME:-localhost}"]'
      HOSTNAME: iotagent-mqtt
      CERT_SC_CERTS_FILES_BASEPATH: /vernemq/cert
      CERT_SC_CERTS_FILES_CA: ca.crt
      CERT_SC_CERTS_FILES_CERT: iotagent-mqtt.crt
      CERT_SC_CERTS_FILES_KEY: iotagent-mqtt.key
      CERT_SC_CERTS_FILES_CRL: ca.crl
      CERT_SC_CERTS_FILES_CABUNDLE: cabundle.crt
      CERT_SC_CRON_CABUNDLE: "true"
    volumes:
      - iotagent-mqtt-cert-side-volume:/vernemq/cert
      - ./secrets:/secrets
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "iotagent-mqtt"
      - "basic-mqtt"
      - "complete"

  v2k-bridge:
    image: dojot/v2k-bridge:${DOJOT_BACKEND_VERSION}
    depends_on:
      - iotagent-mqtt
      - kafka
      - v2k-bridge-cert-sidecar
    environment:
      V2K_APP_HOSTNAME: "v2k-bridge"
      V2K_APP_USER_CONFIG_FILE: "docker.conf"
      V2K_PRODUCER_METADATA_BROKER_LIST: "kafka:9092"
      V2K_MQTT_PORT: 9883
      V2K_MQTT_CA: "/certs/ca.crt"
      V2K_MQTT_CERT: "/certs/v2k-bridge.crt"
      V2K_MQTT_KEY:  "/certs/v2k-bridge.key"
      V2K_LOG_CONSOLE_LEVEL: "info"
    restart: always
    volumes:
      - v2k-bridge-cert-side-volume:/certs
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "v2k-bridge"
      - "basic-mqtt"
      - "complete"

  v2k-bridge-cert-sidecar:
    image: dojot/cert-sidecar:${DOJOT_BACKEND_VERSION}
    depends_on:
      - x509-identity-mgmt
    environment:
      CERT_SC_APP_SIDECAR_TO: 'v2k-bridge'
      CERT_SC_LOG_CONSOLE_LEVEL: 'info'
      CERT_SC_CERTS_CRL: 'false'
      CERT_SC_CERTS_HOSTNAMES: '["v2k-bridge"]'
      HOSTNAME: v2k-bridge
      CERT_SC_CERTS_FILES_BASEPATH: /certs
      CERT_SC_CERTS_FILES_CA: ca.crt
      CERT_SC_CERTS_FILES_CERT: v2k-bridge.crt
      CERT_SC_CERTS_FILES_KEY: v2k-bridge.key
    volumes:
      - v2k-bridge-cert-side-volume:/certs
      - ./secrets:/secrets
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "v2k-bridge"
      - "basic-mqtt"
      - "complete"

  k2v-bridge:
    image: dojot/k2v-bridge:${DOJOT_BACKEND_VERSION}
    depends_on:
      - iotagent-mqtt
      - kafka
      - k2v-bridge-cert-sidecar
    environment:
      K2V_APP_HOSTNAME: "k2v-bridge"
      K2V_APP_USER_CONFIG_FILE: "docker.conf"
      K2V_CONSUMER_METADATA_BROKER_LIST: "kafka:9092"
      K2V_MQTT_PORT: 9883
      K2V_MQTT_CA: "/certs/ca.crt"
      K2V_MQTT_CERT: "/certs/k2v-bridge.crt"
      K2V_MQTT_KEY: "/certs/k2v-bridge.key"
      K2V_LOG_CONSOLE_LEVEL: "info"
    restart: always
    volumes:
      - k2v-bridge-cert-side-volume:/certs
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "k2v-bridge"
      - "basic-mqtt"
      - "complete"

  k2v-bridge-cert-sidecar:
    image: dojot/cert-sidecar:${DOJOT_BACKEND_VERSION}
    depends_on:
      - x509-identity-mgmt
    volumes:
      - k2v-bridge-cert-side-volume:/certs
      - ./secrets:/secrets
    environment:
      CERT_SC_APP_SIDECAR_TO: 'k2v-bridge'
      CERT_SC_LOG_CONSOLE_LEVEL: 'info'
      CERT_SC_CERTS_CRL: 'false'
      CERT_SC_CERTS_HOSTNAMES: '["k2v-bridge"]'
      HOSTNAME: k2v-bridge
      CERT_SC_CERTS_FILES_BASEPATH: /certs
      CERT_SC_CERTS_FILES_CA: ca.crt
      CERT_SC_CERTS_FILES_CERT: k2v-bridge.crt
      CERT_SC_CERTS_FILES_KEY: k2v-bridge.key
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "k2v-bridge"
      - "basic-mqtt"
      - "complete"

  ## file storage
  minio-files:
    image: minio/minio:RELEASE.2021-11-09T03-21-45Z
    restart: always
    hostname: minio-files
    command: server /data --console-address ":9001"
    volumes:
      - minio-file-volume:/data
      - ./secrets:/secrets
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      - keycloak
      - create_secrets
    environment:
      MINIO_ACCESS_KEY_FILE: MINIO_ACCESS_KEY
      MINIO_SECRET_KEY_FILE: MINIO_SECRET_KEY
      MINIO_ROOT_USER_FILE: MINIO_ACCESS_KEY
      MINIO_ROOT_PASSWORD_FILE: MINIO_SECRET_KEY
    secrets:
      - MINIO_SECRET_KEY
      - MINIO_ACCESS_KEY
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "minio-files"
      - "complete"

  file-mgmt:
    image: dojot/file-mgmt:${DOJOT_BACKEND_VERSION}
    restart: always
    depends_on:
      - minio-files
      - kafka
      - keycloak
      - keycloak-proxy
    volumes:
      - ./secrets:/secrets
    environment:
      FILEMGMT_LIGHTSHIP_DETECT_KUBERNETES: "false"
      FILEMGMT_SERVER_HOST: file-mgmt
      FILEMGMT_MINIO_ACCESS_KEY_FILE: MINIO_ACCESS_KEY
      FILEMGMT_MINIO_SECRET_KEY_FILE: MINIO_SECRET_KEY
      FILEMGMT_MINIO_BUCKET_SUFFIX: ${MINIO_BUCKET_SUFFIX}
      FILEMGMT_CONSUMER_METADATA_BROKER_LIST: kafka:9092
      FILEMGMT_KEYCLOAK_TENANTS_URL: "http://keycloak-proxy:8081/api/v1/tenant"
      FILEMGMT_KEYCLOAK_URL: "http://keycloak:8080"
      FILEMGMT_KEYCLOAK_CLIENT_ID: "dojot-file-mgmt"
      FILEMGMT_KEYCLOAK_CLIENT_SECRET_FILE: "dojot-file-mgmt"
      FILEMGMT_LOG_CONSOLE_LEVEL: "info"
    secrets:
      - MINIO_SECRET_KEY
      - MINIO_ACCESS_KEY
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "file-mgmt"
      - "complete"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 20s
      retries: 3

  ## storage
  influxdb-retriever:
    image: dojot/influxdb-retriever:${DOJOT_BACKEND_VERSION}
    depends_on:
      - device-manager
      - kafka
      - influxdb
      - keycloak
      - keycloak-proxy
    environment:
      RETRIEVER_LOG_CONSOLE_LEVEL: "info"
      RETRIEVER_KEYCLOAK_URI: "http://keycloak:8080"
      RETRIEVER_KEYCLOAK_CLIENT_ID: "dojot-influxdb-retriever"
      RETRIEVER_KEYCLOAK_CLIENT_SECRET_FILE: "dojot-influxdb-retriever"
      RETRIEVER_SYNC_DEVICES: "http://device-manager-sidecar:5000/device"
      RETRIEVER_SYNC_CRON_EXPRESSION: "* */3 * * *"
    restart: always
    volumes:
      - ./secrets:/secrets
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "influxdb"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  influxdb-telegraf:
    image: dojot/telegraf:${DOJOT_BACKEND_VERSION}
    depends_on:
      - kafka
      - influxdb
    environment:
      TELEGRAF_DEBUG: true
      TELEGRAF_INFLUXDB_URL: "http://influxdb:8086"
      TELEGRAF_INFLUXDB_TOKEN: "dojot@token_default"
      TELEGRAF_INFLUXDB_BUCKET_NAME: "devices"
      TELEGRAF_KAFKA_BROKER: "kafka:9092"
      TELEGRAF_KAFKA_CONSUMER_GROUP: "influxdb-telegraf"
      TELEGRAF_KAFKA_DATA_TOPIC: "^.+device-data"
      TELEGRAF_KAFKA_DATA_TOPIC_REFRESH_INTERVAL: "180s"
      TELEGRAF_KAFKA_DATA_OFFSET: oldest
      TELEGRAF_KAFKA_DATA_MAX_BUFFER: 5000
      TELEGRAF_DATA_READ_INTERVAL: "3s"
      TELEGRAF_DATA_FLUSH_INTERVAL: "3s"
      TELEGRAF_DATA_BATCH_SIZE: 2000
      TELEGRAF_DATA_BUFFER_LIMIT: 10000
      TELEGRAF_KAFKA_TENANCY_TOPIC: "dojot-management.dojot.tenancy"
      TELEGRAF_KAFKA_TENANCY_OFFSET: oldest
      TELEGRAF_TENANCY_INTERVAL: "120s"
    volumes:
      - ./influxdb/telegraf/:/etc/telegraf/
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "influxdb"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  influxdb-setup:
    image: quay.io/influxdb/influxdb:v2.0.2
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    environment:
      DEFAULT_RETENTION: "7d" # default (admin) organization expiry time
    volumes:
      - influxdb-volume:/root/.influxdbv2/
      - ./influxdb/init-influx.sh:/init-influx.sh:Z
    entrypoint:
      - /init-influx.sh
    depends_on:
      influxdb:
        condition: service_healthy
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "influxdb"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  influxdb:
    image: quay.io/influxdb/influxdb:v2.0.2
    restart: always
    volumes:
      - influxdb-volume:/root/.influxdbv2
    healthcheck:
      test: "influx ping"
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "influxdb"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  ## Cron
  cron:
    image: dojot/cron:${DOJOT_BACKEND_VERSION}
    restart: always
    environment:
      CRON_KEYCLOAK_URL: "http://keycloak:8080"
      CRON_KEYCLOAK_CLIENT_ID: "dojot-cron"
      CRON_KEYCLOAK_CLIENT_SECRET_FILE: "dojot-cron"
      CRON_LOGGER_CONSOLE_LEVEL: "info"
    volumes:
      - ./secrets:/secrets
    depends_on:
      - kafka
      - mongodb
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "cron"
      - "complete"

  data-manager:
    image: dojot/data-manager:development
    restart: always
    depends_on:
      - device-manager-sidecar
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "data-manager"
      - "complete"


  # GUI NX MFE
  container-nx:
    image: dojot/container-nx:${DOJOT_FRONTEND_VERSION}
    depends_on:
      - backstage
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "nx"
      - "front-end"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  common-nx:
    image: dojot/common-nx:${DOJOT_FRONTEND_VERSION}
    depends_on:
      - backstage
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "nx"
      - "front-end"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  home-nx:
    image: dojot/home-nx:${DOJOT_FRONTEND_VERSION}
    depends_on:
      - backstage
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "nx"
      - "front-end"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  dashboard-nx:
    image: dojot/dashboard-nx:${DOJOT_FRONTEND_VERSION}
    depends_on:
      - backstage
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "nx"
      - "front-end"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  devices-nx:
    image: dojot/devices-nx:${DOJOT_FRONTEND_VERSION}
    depends_on:
      - backstage
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "nx"
      - "front-end"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  templates-nx:
    image: dojot/templates-nx:${DOJOT_FRONTEND_VERSION}
    depends_on:
      - backstage
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "nx"
      - "front-end"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  security-nx:
    image: dojot/security-nx:${DOJOT_FRONTEND_VERSION}
    depends_on:
      - backstage
    restart: always
    <<: *loki-logging
    <<: *dojot-networking
    profiles:
      - "nx"
      - "front-end"
      - "basic-http"
      - "basic-mqtt"
      - "complete"

  # GUI to Kong Admin API - BEGIN
  # Konga GUI will be available at http://localhost:1337
  #
  konga:
    image: dojot/pantsel_konga:0.14.7
    ports:
      - 1337:1337
    environment:
      DB_ADAPTER: mongo
      DB_DATABASE: konga
      DB_HOST: mongodb
      KONGA_LOG_LEVEL: info
      NO_AUTH: "true"
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /konga.js
      NODE_ENV: production
      BASE_URL: ${DOJOT_DOMAIN_NAME:-"localhost"}
    volumes:
      - ./kong/konga.config.js:/konga.js:ro
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'
    profiles:
      - "tools"


  # GUI to Kafka - BEGIN
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    ports:
      - 9090:9000
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'
    profiles:
      - "tools"

# GUI to mongo - BEGIN
# GUI will be available at http://${DOJOT_DOMAIN_NAME}:8383
  mongo-express-gui:
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
    ports:
      - "8383:8081"
    profiles:
      - "tools"

# GUI to postgres - BEGIN
# GUI will be available at http://${DOJOT_DOMAIN_NAME}:5050
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    restart: always
    ports:
      - 5050:80
    profiles:
    - "tools"

volumes:
  ejbca-volume:
  ejbca-client-tls-volume:
  postgres-volume:
  mongodb-volume:
  mongodb-cfg-volume:
  minio-file-volume:
  zookeeper-volume:
  zookeeper-log-volume:
  zookeeper-secrets-volume:
  kafka-volume:
  kafka-secrets-volume:
  http-agent-cert-sidecar-x509-volume:
  http-agent-redis-x509-volume:
  http-agent-redis-basic-volume:
  certs:
  ca:
  iotagent-mqtt-cert-side-volume:
  iotagent-mqtt-volume:
  iotagent-mqtt-log-volume:
  iotagent-mqtt-etc-volume:
  v2k-bridge-cert-side-volume:
  k2v-bridge-cert-side-volume:
  kafka-ws-redis-volume:
  backstage-redis-volume:
  influxdb-volume:
  influxdb-chronograf-volume:
  acl-redis-volume:

secrets:
  MINIO_SECRET_KEY:
    file: ./secrets/MINIO_SECRET_KEY
  MINIO_ACCESS_KEY:
    file: ./secrets/MINIO_ACCESS_KEY

networks:
  default:
    name: dojot