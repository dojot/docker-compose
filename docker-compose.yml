version: '2.1'
services:

#  certs:
#    image: nginx
#    restart: always
#    depends_on:
#      - apigw
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - /etc/letsencrypt:/certs
#      - ./certs/default.conf:/etc/nginx/conf.d/default.conf

  sth:
    image: telefonicaiot/fiware-sth-comet
    restart: always
    depends_on:
      - mongodb
    networks:
      default:
        aliases:
          - comet
          - history
    environment:
      STH_HOST: "0.0.0.0"
      DB_URI: "mongodb:27017"


  mongodb:
    image: "mongo:3.2"
    restart: always
    user: "mongodb"

  mqtt:
    image: ansi/mosquitto
    # image: dojot/mqtt-manager   # for TLS support
    restart: always
    ports:
      - "1883:1883"   # for clear MQTT
      #- "8883:8883"  # for MQTT over TLS

  iotagent:
    image: dojot/iotagent-json:latest
    restart: always
    depends_on:
      - mongodb
      - mqtt
    volumes:
      - ./iotagent/config.json:/opt/iotagent-json/config.json:Z
    environment:
       MQTT_TLS: "false"
    networks:
      default:
        aliases:
          - idas

  coap:
    image: "telefonicaiot/lightweightm2m-iotagent:latest"
    restart: always
    depends_on:
      - mongodb
    ports:
      - "127.0.0.1:4041:4041"
      - 5684:5684/udp

  gui:
    image: dojot/gui:latest
    restart: always

  orion:
    image: dojot/fiware-orion:latest
    restart: always
    depends_on:
      - mongodb
    ports:
      - "127.0.0.1:1026:1026"
    command: -dbhost mongodb

  device-manager:
    image: dojot/device-manager:latest
    restart: always
    depends_on:
      - mongodb
      - orion
      - kafka
    networks:
      default:
        aliases:
          - devm

  auth:
    image: dojot/auth
    restart: always
    depends_on:
      - apigw
      - postgres
      - redis
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AUTH_DB_HOST: "postgres"
      AUTH_DB_USER: "kong"
      AUTH_KONG_URL: "http://kong:8001"
      AUTH_CACHE_NAME: "redis"
      AUTH_CACHE_HOST: "redis"

  postgres:
    image: "postgres:9.4"
    restart: always
    environment:
      POSTGRES_USER: "kong"
      POSTGRES_DB: "kong"
    networks:
      default:
        aliases:
          - kong-db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: dojot/kong:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
    command: kong migrations up

  apigw:
    image: dojot/kong:latest
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      kong-migration:
        condition: service_started
    ports:
      - "8000:8000"
      - "8443:8443"
      - "127.0.0.1:8001:8001"
      # - "7946:7946"
      # - "7946:7946/udp"  # cluster
    environment:
      # KONG_DATABASE: "cassandra"
      KONG_DATABASE: "postgres"
      KONG_CASSANDRA_CONTACT_POINTS: "cassandra"
      KONG_PG_HOST: "postgres"
    volumes:
      - ./apigw/plugins/pep-kong:/plugins/pep-kong
      - ./apigw/plugins/mutualauthentication:/plugins/mutualauthentication
    networks:
      default:
        aliases:
          - kong

  perseo-core:
    image: telefonicaiot/perseo-core
    restart: always
    command: -perseo_fe_url perseo-fe:9090

  perseo-fe:
    image: dojot/perseo-fe:latest
    restart: always
    ports:
      - "127.0.0.1:9090:9090"
    depends_on:
      - perseo-core
      - mongodb
    environment:
      - PERSEO_MONGO_HOST=mongodb
      - PERSEO_CORE_URL=http://perseo-core:8080
      - PERSEO_ORION_URL=http://orion:1026/NGSI10/updateContext

  mashup:
    image: dojot/mashup:latest
    restart: always

  redis:
    image: redis
    restart: always


  zookeeper:
    image: "zookeeper:3.4"

  kafka:
    image: "ches/kafka:0.10.1.1"
    depends_on:
      - zookeeper
    environment:
      ZOOKEEPER_IP: zookeeper
      KAFKA_NUM_PARTITIONS: 10

  cassandra:
    image: "cassandra:3.10"

  ejbca:
    image: "dojot/ejbca"


  ma_redis:
    image: "redis:3.2.8"
    volumes:
      - ./ma/redis.conf:/usr/local/etc/redis/redis.conf
      - ./ma/sentinel.conf:/usr/local/etc/redis/sentinel.conf
      - ./ma/redis_init.sh:/usr/local/etc/redis/redis_init.sh
    command: sh -c "chmod +x /usr/local/etc/redis/redis_init.sh && /usr/local/etc/redis/redis_init.sh"

  kerberos:
    image: "dojot/kerberos"
    environment:
      - CASSANDRA_HOSTNAME=cassandra
      - CASSANDRA_PORT=9042
    volumes:
      - ./ma/node.config:/opt/jboss/wildfly/standalone/configuration/node.config
      - ./ma/kafka.brokers:/opt/jboss/wildfly/standalone/configuration/kafka.brokers
      - ./ma/redis.sentinels:/opt/jboss/wildfly/standalone/configuration/redis.sentinels
    depends_on:
      - kafka
      - redis
      - cassandra
